version: 2.1

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCESS=$(curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/hu7t36py^C/DB_MIGRATION_<< parameters.id >>)
            if [[ "$SUCCESS" == 1 ]]
            then
              npm run migrations:revert
            fi
          when: << parameters.when >>
            
jobs:          
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fe:ef:24:ff:c8:7e:9d:c6:e7:ec:38:4d:50:7a:fc:97"]
      - run:
          name: Install dependencies and deploy backend
          no_output_timeout: 20m
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
            ls
            cd backend
            npm i
            npm run build
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls
            cd ../.circle/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
        

          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
         requires: [test-frontend, test-backend, scan-frontend, scan-backend, deploy-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations, deploy-frontend]
